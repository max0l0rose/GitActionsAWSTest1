# This workflow will build and push a new container image to Amazon ECR,
# and then will deploy a new task definition to Amazon ECS, when there is a push to the "master" branch.
#
# To use this workflow, you will need to complete the following set-up steps:
#
# 1. Create an ECR repository to store your images.
#    For example: `aws ecr create-repository --repository-name my-ecr-repo --region us-east-2`.
#    Replace the value of the `ECR_REPOSITORY` environment variable in the workflow below with your repository's name.
#    Replace the value of the `AWS_REGION` environment variable in the workflow below with your repository's region.
#
# 2. Create an ECS task definition, an ECS cluster, and an ECS service.
#    For example, follow the Getting Started guide on the ECS console:
#      https://us-east-2.console.aws.amazon.com/ecs/home?region=us-east-2#/firstRun
#    Replace the value of the `ECS_SERVICE` environment variable in the workflow below with the name you set for the Amazon ECS service.
#    Replace the value of the `ECS_CLUSTER` environment variable in the workflow below with the name you set for the cluster.
#
# 3. Store your ECS task definition as a JSON file in your repository.
#    The format should follow the output of `aws ecs register-task-definition --generate-cli-skeleton`.
#    Replace the value of the `ECS_TASK_DEFINITION` environment variable in the workflow below with the path to the JSON file.
#    Replace the value of the `CONTAINER_NAME` environment variable in the workflow below with the name of the container
#    in the `containerDefinitions` section of the task definition.
#
# 4. Store an IAM user access key in GitHub Actions secrets named `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY`.
#    See the documentation for each action used below for the recommended IAM policies for this IAM user,
#    and best practices on handling the access key credentials.

name: AWS_SSH

on:
  push:
    branches: [ "master" ]

env:
  AWS_REGION: eu-central-1                     # set this to your preferred AWS region, e.g. us-west-1
#  ECR_REPOSITORY: MY_ECR_REPOSITORY           # set this to your Amazon ECR repository name
#  ECS_SERVICE: MY_ECS_SERVICE                 # set this to your Amazon ECS service name
#  ECS_CLUSTER: MY_ECS_CLUSTER                 # set this to your Amazon ECS cluster name
#  ECS_TASK_DEFINITION: MY_ECS_TASK_DEFINITION # set this to the path to your Amazon ECS task definition
#                                              # file, e.g. .aws/task-definition.json
#  CONTAINER_NAME: MY_CONTAINER_NAME           # set this to the name of the container in the
                                               # containerDefinitions section of your task definition

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
## good
##      port: ${{ secrets.PORT }}
##      passphrase: ${{ secrets.PASSPHRASE }}
#      - name: ssh key passphrase ------------
#        uses: appleboy/ssh-action@v0.1.10
#        with:
#          host: ec2-18-194-28-107.eu-central-1.compute.amazonaws.com
#          username: ubuntu
#          key: ${{ secrets.SECRET1 }}
#          script: |
#            whoami
#            ls -al

    - name: === kuku1 ===
#        set -x

#      uses: actions/checkout@v3
      #        echo ${{secrets.SECRET1}} >> aws_user1_key.pem
      #        cat aws_user1_key.pem | sed 's/./& /g'
#        touch ~/.ssh/known_hosts
#        ssh -tt -i "aws_user1_key.pem" ubuntu@ec2-18-194-28-107.eu-central-1.compute.amazonaws.com

#        ssh-add - <<< "$DEV_ENV_FILE"
#        ssh -tt ubuntu@ec2-18-194-28-107.eu-central-1.compute.amazonaws.com -T runner@github.com
#        echo =====================

#        base64 -d <<< $DEV_ENV_FILE > aws_user1_key.pem

#        mkdir ~/.ssh/
#        echo "ssh-keyscan ---"
#        ssh-keyscan -t rsa github.com >> ~/.ssh/known_hosts

#        echo =====================
#        echo "cat known_hosts ---"
#        cat ~/.ssh/known_hosts

#        echo =====================
#        ls ~/.ssh -ag

#        sed -i -e '$a\' aws_user1_key.pem
      env:
        DEV_ENV_FILE: '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'
        #${{ secrets.BIGHALL }} #BIGHALL SSH_GEN_PRIV_KEY1 SECRET1

#| tr -d '\r'
      run: |
        echo github.workspace = '${{ github.workspace }}'
        echo "pwd = $(pwd)"
        echo "-----BEGIN OPENSSH PRIVATE_KEY-----" > aws_user1_key.pem
        echo $DEV_ENV_FILE | tr " " "\n" >> aws_user1_key.pem
        echo "-----END OPENSSH PRIVATE KEY-----\n\n" >> aws_user1_key.pem
        sudo chmod 600 aws_user1_key.pem
        ls ~ -ag
        hexdump -C aws_user1_key.pem
        echo =====================
        echo "ssh ---"
        sudo ssh -i "aws_user1_key.pem" -v -o StrictHostKeyChecking=no ubuntu@35.158.210.22



#    - name: === Checkout
#      uses: actions/checkout@v3
#
#    - name: Configure AWS credentials
#      uses: aws-actions/configure-aws-credentials@v1
#      with:
#        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#        aws-region: ${{ env.AWS_REGION }}
#
#    - name: Login to Amazon ECR
#      id: login-ecr
#      uses: aws-actions/amazon-ecr-login@v1
#
#    - name: Build, tag, and push image to Amazon ECR
#      id: build-image
#      env:
#        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#        IMAGE_TAG: ${{ github.sha }}
#      run: |
#        # Build a docker container and
#        # push it to ECR so that it can
#        # be deployed to ECS.
#        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
#        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
#        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
#
#    - name: Fill in the new image ID in the Amazon ECS task definition
#      id: task-def
#      uses: aws-actions/amazon-ecs-render-task-definition@v1
#      with:
#        task-definition: ${{ env.ECS_TASK_DEFINITION }}
#        container-name: ${{ env.CONTAINER_NAME }}
#        image: ${{ steps.build-image.outputs.image }}
#
#    - name: Deploy Amazon ECS task definition
#      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
#      with:
#        task-definition: ${{ steps.task-def.outputs.task-definition }}
#        service: ${{ env.ECS_SERVICE }}
#        cluster: ${{ env.ECS_CLUSTER }}
#        wait-for-service-stability: true
